#!/bin/bash
#
# Simple shell script to update IP2Location database files
#
# For updating non-sample files, credentials are required:
#  provided by file $HOME/.ip2location
#   login=EMAIL
#   password=PASSWORD
#
# Project    : ipv6calc/IP2Location
# File       : IP2Location-update.sh
# Version    : $Id: IP2Location-update.sh.in,v 1.4 2015/02/20 07:00:23 ds6peter Exp $
# Copyright  : 2012-2015 by Peter Bieringer <pb (at) bieringer.de>
# License    : GNU GPL version 2

IP2LOCATION_DAT_DIR_DEFAULT="@IP2LOCATION_DB@"
[ -z "$IP2LOCATION_DAT_DIR" ] && IP2LOCATION_DAT_DIR="$IP2LOCATION_DAT_DIR_DEFAULT"

IP2LOCATION_DAT_URL_BASE="http://www.ip2location.com/download?login=@LOGIN@&password=@PASSWORD@"
IP2LOCATION_DAT_URL_BASE_SAMPLE="http://www.ip2location.com/downloads"

IP2LOCATION_DAT_FILES="IPV6BIN"
IP2LOCATION_DAT_FILES_SAMPLE="20"


help() {
	cat <<END
Usage: $(basename "$0") [-D <dir>]
	-D <dir>	database directory (optional)

	database directory: $IP2LOCATION_DAT_DIR (default: $IP2LOCATION_DAT_DIR_DEFAULT)

	it honors externally defined environment value: IP2LOCATION_DAT_DIR

 this script will download data from ip2location.com
 into given/set database directory

 Samples:
 IP2LOCATION_DAT_URL_BASE_SAMPLE=$IP2LOCATION_DAT_URL_BASE_SAMPLE
 IP2LOCATION_DAT_FILES_SAMPLE=$IP2LOCATION_DAT_FILES_SAMPLE
 (create also softlink to IP-COUNTRY.BIN if not existing)

 With authentication (requires login/password in \$HOME/.ip2location) and a valid subscription
 IP2LOCATION_DAT_URL_BASE=$IP2LOCATION_DAT_URL_BASE
 IP2LOCATION_DAT_FILES=$IP2LOCATION_DAT_FILES
END
}

while getopts "D:h\?" opt; do
	case $opt in
	    D)
		IP2LOCATION_DAT_DIR=$OPTARG
		;;
	    *)
		help
		exit 1
		;;
	esac
done


# directory check
if [ ! -d "$IP2LOCATION_DAT_DIR" ]; then
	echo "ERROR : missing directory: $IP2LOCATION_DAT_DIR"
	exit 1
fi

if [ ! -w "$IP2LOCATION_DAT_DIR" ]; then
	echo "ERROR : missing write permissions on directory: $IP2LOCATION_DAT_DIR"
	exit 1
fi

# source credentials (must provide login= and password=)
if [ -f "$HOME/.ip2location" ]; then
	source "$HOME/.ip2location"

	for token in login password; do
		if [ -z "${!token}" ]; then
			echo "NOTICE: missing credential token in: $HOME/.ip2location [$token=<VALUE>] (skip authenticated download)"
			IP2LOCATION_DAT_FILES=""
		fi
	done

	IP2LOCATION_DAT_URL_BASE=${IP2LOCATION_DAT_URL_BASE//@LOGIN@/$login}
	IP2LOCATION_DAT_URL_BASE=${IP2LOCATION_DAT_URL_BASE//@PASSWORD@/$password}
else
	echo "NOTICE: missing credential file: $HOME/.ip2location (skip authenticated download)"
	IP2LOCATION_DAT_FILES=""
fi

# Download and unpack non-sample files
for file in $IP2LOCATION_DAT_FILES; do
	file_dest="$IP2LOCATION_DAT_DIR/`basename "$file".zip`"

	echo "INFO  : try to download file: $file ($file_dest)"
	wget -q -O "$file_dest" "$IP2LOCATION_DAT_URL_BASE&productcode=$file"
	if [ $? -ne 0 ]; then
		echo "ERROR : download of file not successful: $file ($file_dest)"
		continue
	fi
	echo "INFO  : download of file successful: $file ($file_dest)"

	if ! file "$file_dest" | grep -q "Zip archive data"; then
		echo "ERROR : downloaded file is not a ZIP archive: $file_dest"
		continue
	fi

	unzip -o -d "$IP2LOCATION_DAT_DIR" "$file_dest" '*.BIN'
	if [ $? -ne 0 ]; then
		echo "ERROR : unzip of file not successful: $file_dest"
		continue
	fi
	echo "INFO  : unzip of file successful: $file_dest"
done

# Download and unpack sample files
for number in $IP2LOCATION_DAT_FILES_SAMPLE; do
	file_dest="$IP2LOCATION_DAT_DIR/sample.bin.db$number.zip"

	echo "INFO  : try to download sample db: $number ($file_dest)"
	wget -q -O "$file_dest" "$IP2LOCATION_DAT_URL_BASE_SAMPLE/sample.bin.db$number.zip"
	if [ $? -ne 0 ]; then
		echo "ERROR : download of file not successful: DB$number ($file_dest)"
		continue
	fi
	echo "INFO  : download of file successful: DB$number ($file_dest)"

	if ! file "$file_dest" | grep -q "Zip archive data"; then
		echo "ERROR : downloaded file is not a ZIP archive: $file_dest"
		continue
	fi

	unzip -o -d "$IP2LOCATION_DAT_DIR" "$file_dest" '*.BIN'
	if [ $? -ne 0 ]; then
		echo "ERROR : unzip of file not successful: $file_dest"
		continue
	fi
	echo "INFO  : unzip of file successful: $file_dest"

	# get unzipped file
	file=$(unzip -l "$file_dest" | grep ".BIN$" | awk '{ print $4 }')

	if [ ! -e "$IP2LOCATION_DAT_DIR/IP-COUNTRY.BIN" ]; then
		echo "NOTICE: create softlink: IP-COUNTRY.BIN -> $file"
		ln -s "$file" "$IP2LOCATION_DAT_DIR/IP-COUNTRY.BIN"
		if [ $? -ne 0 ]; then
			echo "ERROR : can't create softlink ($!)"
		fi
	else
		if [ -L "$IP2LOCATION_DAT_DIR/IP-COUNTRY.BIN" ]; then
			link=$(readlink "$IP2LOCATION_DAT_DIR/IP-COUNTRY.BIN")
			if [ "$link" = "$file" ]; then
				echo "INFO  : $IP2LOCATION_DAT_DIR/IP-COUNTRY.BIN exists and is a softlink to: $link"
			else
				echo "WARN  : $IP2LOCATION_DAT_DIR/IP-COUNTRY.BIN exists but is not a softlink to: $file ($link instead)"
			fi
		elif [ "$file" = "IP-COUNTRY.BIN" ]; then
			# nothing to do
			true
		else
			echo "WARN  : $IP2LOCATION_DAT_DIR/IP-COUNTRY.BIN is not a softlink but also not the extracted one"
		fi
	fi
done

# Adjust permissions
chmod 644 $IP2LOCATION_DAT_DIR/*.BIN
