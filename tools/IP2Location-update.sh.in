#!/bin/bash
#
# Simple shell script to update IP2Location database files
#
# For updating non-sample files, credentials are required:
#  provided by file $HOME/.ip2location
#   login=EMAIL
#   password=PASSWORD
#
# Project    : ipv6calc/IP2Location
# File       : IP2Location-update.sh
# Version    : $Id: IP2Location-update.sh.in,v 1.6 2015/04/16 08:42:44 ds6peter Exp $
# Copyright  : 2012-2015 by Peter Bieringer <pb (at) bieringer.de>
# License    : GNU GPL version 2

# 20150416: remove softlink support, no longer needed


IP2LOCATION_DAT_DIR_DEFAULT="@IP2LOCATION_DB@"
[ -z "$IP2LOCATION_DAT_DIR" ] && IP2LOCATION_DAT_DIR="$IP2LOCATION_DAT_DIR_DEFAULT"

IP2LOCATION_DAT_URL_BASE="http://www.ip2location.com/download?login=@LOGIN@&password=@PASSWORD@"
IP2LOCATION_DAT_URL_BASE_SAMPLE="http://www.ip2location.com/downloads"

# (free) subscription is required for LITE DB-Number > 1
# Format: Proto:DB-Number
IP2LOCATION_DAT_FILES_LITE_IPV4="IPv4:1 IPv4:11"
IP2LOCATION_DAT_FILES_LITE_IPV6="IPv6:1 IPv6:11"

# list of LITE
IP2LOCATION_DAT_FILES_LITE="$IP2LOCATION_DAT_FILES_LITE_IPV4 $IP2LOCATION_DAT_FILES_LITE_IPV6"

# list of normal (purchased subscription required)
IP2LOCATION_DAT_FILES=""

# list of SAMPLE
IP2LOCATION_DAT_FILES_SAMPLE="IPv4:20 IPv6:20 IPv4:24 IPv6:24"


help() {
	cat <<END
Usage: $(basename "$0") [-D <dir>] [-f]
	-D <dir>	database directory (optional)
	-n		no action (dry-run)
	-s		skip already successfully downloaded files

	database directory: $IP2LOCATION_DAT_DIR (default: $IP2LOCATION_DAT_DIR_DEFAULT)

	it honors externally defined environment value: IP2LOCATION_DAT_DIR

 this script will download data from ip2location.com
 into given/set database directory

 Samples:
 IP2LOCATION_DAT_URL_BASE_SAMPLE=$IP2LOCATION_DAT_URL_BASE_SAMPLE
 IP2LOCATION_DAT_FILES_SAMPLE=$IP2LOCATION_DAT_FILES_SAMPLE

 With authentication (requires login/password in \$HOME/.ip2location) and a valid subscription
 IP2LOCATION_DAT_URL_BASE=$IP2LOCATION_DAT_URL_BASE
 IP2LOCATION_DAT_FILES=$IP2LOCATION_DAT_FILES
END
}

while getopts "fsnD:h\?" opt; do
	case $opt in
	    D)
		IP2LOCATION_DAT_DIR=$OPTARG
		;;
	    n)
		NO_ACTION=1
		;;
	    s)
		SKIP_OK=1
		;;
	    *)
		help
		exit 1
		;;
	esac
done


# directory check
if [ ! -d "$IP2LOCATION_DAT_DIR" ]; then
	echo "ERROR : missing directory: $IP2LOCATION_DAT_DIR"
	exit 1
fi

if [ ! -w "$IP2LOCATION_DAT_DIR" ]; then
	echo "ERROR : missing write permissions on directory: $IP2LOCATION_DAT_DIR"
	exit 1
fi

# source credentials (must provide login= and password=)
if [ -f "$HOME/.ip2location" ]; then
	source "$HOME/.ip2location"

	for token in login password; do
		if [ -z "${!token}" ]; then
			echo "NOTICE: missing credential token in: $HOME/.ip2location [$token=<VALUE>] (skip authenticated download)"
			IP2LOCATION_DAT_FILES=""
		fi
	done

	IP2LOCATION_DAT_URL_BASE=${IP2LOCATION_DAT_URL_BASE//@LOGIN@/$login}
	IP2LOCATION_DAT_URL_BASE=${IP2LOCATION_DAT_URL_BASE//@PASSWORD@/$password}
else
	echo "NOTICE: missing credential file: $HOME/.ip2location (skip authenticated download)"
	IP2LOCATION_DAT_FILES=""
fi

# Download and unpack non-sample files
for list in IP2LOCATION_DAT_FILES_LITE IP2LOCATION_DAT_FILES; do
	if [ -z "${!list}" ]; then
		echo "NOTICE: empty list, skip: $list"
		continue
	fi

	echo "INFO  : download list $list: ${!list}"

	case $list in
	    *_LITE)
		code_suffix="LITEBIN"
		file_prefix="IP2LOCATION-LITE"
		;;
	    *)
		code_suffix="BIN"
		file_prefix="IP2LOCATION"
		;;
	esac

	for token in ${!list}; do
		proto=${token/:*}
		number=${token/*:}

		case $proto in
		    IPv4)
			code="DB${number}${code_suffix}"
			file="${file_prefix}-DB${number}.BIN.ZIP"
			;;
		    IPv6)
			code="DB${number}${code_suffix}IPV6"
			file="${file_prefix}-DB${number}.IPV6.BIN.ZIP"
			;;
		    *)
			echo "ERROR : unsupported proto in token: $token"
			exit 1
			;;
		esac

		file_dest="$IP2LOCATION_DAT_DIR/$file"

		if [ "$NO_ACTION" = "1" ]; then
			echo "NOTICE: download skipped by option: $code ($file_dest)"
			continue
		fi

		if [ "$SKIP_OK" = "1" ]; then
			if file "$file_dest" | grep -q "Zip archive data"; then
				echo "NOTICE: download skipped by option because file already existing and is a ZIP file: $code ($file_dest)"

				file_unzip=$(unzip -l "$file_dest" '*.BIN' | grep "\.BIN$" | awk '{ print $NF }' | head -1)

				if [ -n "$file_unzip" ]; then
					if [ ! -f "$IP2LOCATION_DAT_DIR/$file_unzip" ]; then
						unzip -o -d "$IP2LOCATION_DAT_DIR" "$file_dest" '*.BIN'
						if [ $? -ne 0 ]; then
							echo "ERROR : unzip of file not successful: $file_dest"
							continue
						else
							echo "INFO  : unzip of file successful: $file_dest"
						fi
					else
						echo "INFO  : skip unzip because unzipped file already existing: $code ($file_dest)"
					fi
				fi
				continue
			fi
		fi

		echo "INFO  : try to download file (with credentials): $code ($file_dest)"
		wget -q -O "$file_dest" "$IP2LOCATION_DAT_URL_BASE&productcode=$code"
		if [ $? -ne 0 ]; then
			echo "ERROR : download of file not successful: $code ($file_dest) ($!)"
			continue
		fi
		echo "INFO  : download of file successful: $code ($file_dest)"

		if [ ! -s "$file_dest" ]; then
			echo "ERROR : downloaded file has ZERO size: $file_dest"
			continue
		fi

		if ! file "$file_dest" | grep -q "Zip archive data"; then
			if file "$file_dest" | grep -q "ASCII text"; then
				echo "ERROR : downloaded file is not a ZIP archive: $file_dest ($(head -1 "$file_dest"))"
			else
				echo "ERROR : downloaded file is not a ZIP archive: $file_dest"
			fi
			continue
		fi

		unzip -o -d "$IP2LOCATION_DAT_DIR" "$file_dest" '*.BIN'
		if [ $? -ne 0 ]; then
			echo "ERROR : unzip of file not successful: $file_dest"
			continue
		fi
		echo "INFO  : unzip of file successful: $file_dest"
	done
done

# Download and unpack sample files
echo "INFO  : download sample list: ${IP2LOCATION_DAT_FILES_SAMPLE}"
for token in $IP2LOCATION_DAT_FILES_SAMPLE; do

	proto=${token/:*}
	number=${token/*:}

	case $proto in
	    IPv4)
		prototoken=""
		softlink="IP-COUNTRY.BIN"
		;;
	    IPv6)
		prototoken="6"
		softlink="IPV6-COUNTRY.BIN"
		;;
	    *)
		echo "ERROR : unsupported proto in token: $token"
		exit 1
		;;
	esac

	file="sample${prototoken}.bin.db${number}.zip"

	file_dest="$IP2LOCATION_DAT_DIR/$file"

	if [ "$NO_ACTION" = "1" ]; then
		echo "NOTICE: download skipped by option: $token ($file_dest)"
		continue
	fi

	echo "INFO  : try to download sample db: ${proto}/DB$number ($file_dest)"
	wget -q -O "$file_dest" "$IP2LOCATION_DAT_URL_BASE_SAMPLE/$file"
	if [ $? -ne 0 ]; then
		echo "ERROR : download of file not successful: ${proto}/DB$number ($file_dest)"
		continue
	fi
	echo "INFO  : download of file successful: ${proto}/DB$number ($file_dest)"

	if ! file "$file_dest" | grep -q "Zip archive data"; then
		echo "ERROR : downloaded file is not a ZIP archive: $file_dest"
		continue
	fi

	unzip -o -d "$IP2LOCATION_DAT_DIR" "$file_dest" '*.BIN'
	if [ $? -ne 0 ]; then
		echo "ERROR : unzip of file not successful: $file_dest"
		continue
	fi
	echo "INFO  : unzip of file successful: $file_dest"
done

# Adjust permissions
if [ "$NO_ACTION" != "1" ]; then
	chmod 644 $IP2LOCATION_DAT_DIR/*.BIN
fi
